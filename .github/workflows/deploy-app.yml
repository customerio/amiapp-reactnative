# Deploy the app to stable. Not builds for development/QA
name: Deploy non-development builds 
on:
  push:
    branches: [main, beta, alpha]

env:
  XCODE_VERSION: "13.0"
  GITHUB_CONTEXT: ${{ toJSON(github) }} # used by fastlane for deploying app 
  FASTLANE_XCODEBUILD_SETTINGS_RETRIES: 6 # increase timeout for xcodebuild settings. We have seen this command take a bit longer to do on CI server. 

jobs:
  deploy-ios-app:
    name: Deploy iOS app
    runs-on: macos-11
    steps:
      - uses: actions/checkout@v2
      - name: Setup environment for building and releasing app 
        uses: ./.github/actions/prepare-for-app-build
        with:
          IOS_GOOGLE_SERVICES_BASE64: "${{ secrets.IOS_GOOGLE_SERVICES_BASE64 }}" # cat ios/Google-Services.plist | base64
          ENV_FILE_B64: "${{ secrets.ENV_FILE_B64 }}" # cat env.js | base64
          FIREBASE_APP_DISTRIBUTION_GOOGLE_AUTH: ${{ secrets.FIREBASE_APP_DISTRIBUTION_GOOGLE_AUTH }} # cat ami_app_ci_server-google_cloud_service_account.json | base64
          MATCH_GOOGLE_CLOUD_KEYS_B64: ${{ secrets.MATCH_GOOGLE_CLOUD_KEYS_B64 }} # cat gc_keys.json | base64      
          ANDROID_GOOGLE_SERVICES_BASE64: "${{ secrets.ANDROID_GOOGLE_SERVICES_BASE64 }}" # cat android/app/google-services.json | base64
            
      # Perform git related tasks inside of semantic-release because `git config user...` is already setup. It's easier to run commands in there with exec plugin.
      - name: Deploy app via semantic release 
        uses: cycjimmy/semantic-release-action@v2
        id: semantic-release
        with: 
          # version numbers below can be in many forms: M, M.m, M.m.p
          semantic_version: 18
          extra_plugins: |
            @semantic-release/changelog@6
            @semantic-release/git@10
            @semantic-release/exec@6
        env:
          # Needs to push git commits to repo. Needs write access. 
          # github access token to Ami CI shared github account. 
          # token scoped to just public repositories and is added as a collaborator to the project so it can push code. 
          GITHUB_TOKEN: ${{ secrets.WRITE_ACCESS_BOT_TOKEN }}           
          FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }} # for firebase app distribution 
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_CONTENT_B64: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT_B64 }}
          
      - name: Notify team of success 
        uses: slackapi/slack-github-action@v1.18.0
        if: steps.semantic-release.outputs.new_release_published == 'true' # only run if a git tag was made. 
        with:
          # Use block kit for format of the JSON payloads: https://app.slack.com/block-kit-builder
          payload: |
            {
              "text": "React Native Ami app *stable build* ready for installing",
              "blocks": [
                  {
                      "type": "section",
                      "text": {
                          "type": "mrkdwn",
                          "text": "*React Native Ami app stable build* ready for installing"
                      }
                  },
                  {
                      "type": "divider"
                  },
                  {
                      "type": "section",
                      "text": {
                          "type": "mrkdwn",
                          "text": "*Version ${{ steps.semantic-release.outputs.new_release_version }}* is ready for using!\n\nThis is a non-development build and therefore, is designed to be used by everyone in the company."
                      }
                  }
              ]
            }
        env:
          # Incoming webhook URL that sends message into the correct Slack channel. 
          # Help on how to get the webhook URL: https://github.com/marketplace/actions/slack-send#setup-2
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_NOTIFY_RELEASES_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK   

      - name: Notify team of failure 
        uses: slackapi/slack-github-action@v1.18.0
        if: ${{ failure() }} # only run this if any previous step failed 
        with:
          # Use block kit for format of the JSON payloads: https://app.slack.com/block-kit-builder
          payload: |
            {
              "text": "React Native Ami app *stable build* failed to build",
              "blocks": [
                  {
                      "type": "section",
                      "text": {
                          "type": "mrkdwn",
                          "text": "*React Native Ami app stable build* failed to build"
                      }
                  },
                  {
                      "type": "divider"
                  },
                  {
                      "type": "section",
                      "text": {
                          "type": "mrkdwn",
                          "text": "View <https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}|CI server logs> to learn why and fix the issue."
                      }
                  }
              ]
            }
        env:
          # Incoming webhook URL that sends message into the correct Slack channel. 
          # Help on how to get the webhook URL: https://github.com/marketplace/actions/slack-send#setup-2
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_NOTIFY_RELEASES_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK   

  deploy-android-app:
    runs-on: ubuntu-latest
    name: Deploy Android app
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11' # Robolectric requires v9, but we choose LTS: https://adoptopenjdk.net/
      - name: Setup Android SDK
        uses: android-actions/setup-android@v2      
      - name: Prepare app for building
        run: echo "${{ secrets.GOOGLE_SERVICES_BASE64 }}" | base64 -d > app/google-services.json
        env:
          GOOGLE_SERVICES_BASE64: "${{ secrets.GOOGLE_SERVICES_BASE64 }}"
      - name: Create Local Properties File
        run: touch local.properties
      - name: Add CIO creds secret in local properties
        run: |
          echo "siteId=${{ secrets.CIO_SITE_ID }}" >> local.properties
          echo "apiKey=${{ secrets.CIO_API_KEY }}" >> local.properties
      - name: Setup Ruby to run Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.7.2
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically
      - name: Setup for Firebase App Distribution
        id: setup
        run: |
          echo "${{ secrets.FIREBASE_APP_DISTRIBUTION_GOOGLE_AUTH }}" | base64 -d > firebase_appdistribution_service_account.json
          echo "${{ secrets.RELEASE_KEYSTORE_BASE64 }}" | base64 -d > upload.keystore
        env:
          FIREBASE_APP_DISTRIBUTION_GOOGLE_AUTH: ${{ secrets.FIREBASE_APP_DISTRIBUTION_GOOGLE_AUTH }}
          RELEASE_KEYSTORE_BASE64: ${{ secrets.RELEASE_KEYSTORE_BASE64 }}

      - name: Deploy development build via Fastlane
        uses: maierj/fastlane-action@v2.0.1
        with:
          lane: 'android deploy_app'
          skip-tracking: true
        env:
          FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
          ANDROID_SIGNING_ALIAS: ${{ secrets.ANDROID_SIGNING_ALIAS }}
          ANDROID_SIGNING_KEY_PASSWORD: ${{ secrets.ANDROID_SIGNING_KEY_PASSWORD }}
          ANDROID_SIGNING_STORE_PASSWORD: ${{ secrets.ANDROID_SIGNING_STORE_PASSWORD }}
